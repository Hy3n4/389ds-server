---
# TODO: Section 9.4.1.5, “Creating a Password File for Directory Server”.
# TODO: remove certificate if TLS is disabled?

- name: Check that tls_key[_file] is defined
  assert:
    that:
      - "(dirsrv_tls_key is defined) != (dirsrv_tls_key_file is defined)"  # This is a XOR
    msg: "only one of dirsrv_tls_key or dirsrv_tls_key_file must be defined"
  when: dirsrv_tls_enabled

- name: Check that tls_cert[_file] is defined
  assert:
    that:
      - "(dirsrv_tls_cert is defined) != (dirsrv_tls_cert_file is defined)"  # This is a XOR, again
    msg: "only one of dirsrv_tls_cert or dirsrv_tls_cert_file must be defined"
  when: dirsrv_tls_enabled

- block:
    - name: Copy cert (from variable)
      copy:
        content: "{{ dirsrv_tls_cert }}"
        dest: "/tmp/server-cert-ansible-managed.crt"
        mode: '400'
        setype: cert_t
      when: dirsrv_tls_cert is defined
      changed_when: false

    # TODO: if the file is already on the remote machine, copying it to /tmp is a pointless waste of time...
    - name: Copy cert (from file)
      copy:
        src: "{{ dirsrv_tls_cert_file }}"
        dest: "/tmp/server-cert-ansible-managed.crt"
        remote_src: "{{ dirsrv_tls_files_remote }}"
        mode: '400'
        setype: cert_t
      when: dirsrv_tls_cert_file is defined
      changed_when: false

    - name: Copy private key (from variable)
      copy:
        content: "{{ dirsrv_tls_key }}"
        dest: "/tmp/server-cert-ansible-managed.key"
        mode: '400'
        setype: cert_t
      when: dirsrv_tls_key is defined
      changed_when: false

    - name: Copy private key (from file)
      copy:
        src: "{{ dirsrv_tls_key_file }}"
        dest: "/tmp/server-cert-ansible-managed.key"
        remote_src: "{{ dirsrv_tls_files_remote }}"
        mode: '400'
        setype: cert_t
      when: dirsrv_tls_key_file is defined
      changed_when: false

    - name: Install pyOpenSSL for openssl_pkcs12 module
      package:
        name: pyOpenSSL
        state: present

    # TODO: count certs before, count them after, if they increased but the grep thing still finds one, then pk12util chose another nickname. Throw an error and die. Or check pk12util output

    - name: Create pkcs12
      openssl_pkcs12:
        action: export
        path: "/tmp/server-cert-ansible-managed.p12"
        # Mandatory parameter, but apparently a bug
        # https://github.com/ansible/ansible/issues/46047
        friendly_name: "server-cert-ansible-managed"
        privatekey_path: "/tmp/server-cert-ansible-managed.key"
        certificate_path: "/tmp/server-cert-ansible-managed.crt"
        setype: cert_t
        state: present
      changed_when: false

    - name: Add pkcs12 to NSS database
      shell: >
        pk12util
        -i /tmp/server-cert-ansible-managed.p12
        -n server-cert-ansible-managed
        -d /etc/dirsrv/slapd-{{ dirsrv_serverid }}
        -K ''
        -W ''
      changed_when: false

    # pk12util will happily add another certificate with the same
    # nickname to the NSS database, if the key or something in the
    # certificate is different. If they are identical, the operation
    # succeeds but there's only one certificate in the database so
    # it's all good.
    # I still haven't figured out how to *actually* set the nickname,
    # since it's neither the filename nor the friendly_name from the
    # openssl_pkcs12 module.
    # Either way, we need to check the NSS database and remove the old
    # key/cert. Or at least we should, I don't know what happens if
    # 389DS finds such duplicate certificates.
    #
    # Let's start by counting what we have there
    - name: Count Ansible managed keys in NSS database
      shell: >
        certutil -K
        -d /etc/dirsrv/slapd-{{ dirsrv_serverid }}/
        |
        grep
        -c "server-cert-ansible-managed"
      register: dirsrv_nss_key_count
      changed_when: false

    # This is needed because Jinja2 templates are not allowed in "when"
    # and Ansible casts everything to string or boolean, so no integer
    # variables for us...
    - name: Count keys
      set_fact:
        dirsrv_nss_key_count_too_many: "{{ dirsrv_nss_key_count.stdout | int > 1 }}"

    # This is the correct way to remove private keys (section 9.3.8.1
    # from the Administration Guide), however it removes a "random"
    # key, so we have to remove all of them and add the correct one
    # again...
    - name: Remove old keys from NSS database
      shell: >
        certutil -F
        -d /etc/dirsrv/slapd-{{ dirsrv_serverid }}
        -n "server-cert-ansible-managed"
      when: dirsrv_nss_key_count_too_many
      # I'm still wondering if this loop is horrible or clever...
      loop: "{{ range(0, dirsrv_nss_key_count.stdout|int) | list }}"

    - name: Add pkcs12 to NSS database (again)
      shell: >
        pk12util
        -i /tmp/server-cert-ansible-managed.p12
        -n server-cert-ansible-managed
        -d /etc/dirsrv/slapd-{{ dirsrv_serverid }}
        -K ''
        -W ''
      when: dirsrv_nss_key_count_too_many

    # I *think* this is only for self-signed certificates, but not entirely sure...
    - name: Set certificate parameters
      shell: >
        certutil -M
        -d /etc/dirsrv/slapd-{{ dirsrv_serverid }}/
        -n server-cert-ansible-managed
        -t "u,u,u"
      when: not dirsrv_tls_certificate_trusted

      # --- CA certificates stuff ---------------------------------------

      # The role that I forked added CA certificates to system-wide
      # trusted CAs.
      # The manual says to add CA to the instance NSS db. Anyway,
      # Here's the relevant parts.
      #
      # - name: copy public cert chain to ca-trust
      #   copy:
      #     content: "{{ tls_cert }}"
      #     dest: "/etc/pki/ca-trust/source/anchors/{{ tls_cn }}.crt"

      # - name: Add public cert to ca trust
      #   shell: "/bin/update-ca-trust"

      # -t C,, or -t T,, or -t CT,,?
      # add -a if the certificate is ASCII encoded
      # - name: Install certificate into {{ serverid }} NSS db
      #   command: >
      #     certutil -A
      #     -d '/etc/dirsrv/slapd-{{ serverid }}'
      #     -n 'ansible_managed_{{ serverid }}'
      #     -t 'C,,'
      #     -a
      #     -i '/tmp/dirsrv_{{ serverid }}_ca_ansible_managed.crt'
      #   changed_when: false

      # --- end CA certificates stuff -----------------------------------

  when: dirsrv_tls_enabled | bool
  always:
    - name: Remove temporary files
      file:
        state: absent
        path: "{{ item }}"
      loop:
        - "/tmp/server-cert-ansible-managed.crt"
        - "/tmp/server-cert-ansible-managed.key"
        - "/tmp/server-cert-ansible-managed.p12"
      changed_when: false

- name: Remove RSA configuration for TLS (if disabled)
  ldap_entry:
    params: "{{ dirsrv_ldap_auth }}"
    dn: "cn=RSA,cn=encryption,cn=config"
    state: absent
  when: not dirsrv_tls_enabled
  notify: dirsrv restart

- name: Create RSA configuration for TLS (if enabled)
  ldap_entry:
    params: "{{ dirsrv_ldap_auth }}"
    dn: "cn=RSA,cn=encryption,cn=config"
    objectClass:
      - top
      - nsEncryptionModule
    state: present
  when: dirsrv_tls_enabled | bool
  notify: dirsrv restart

- name: Configure RSA parameters
  ldap_attr:
    params: "{{ dirsrv_ldap_auth }}"
    dn: "cn=RSA,cn=encryption,cn=config"
    name: "{{ item.name }}"
    values: "{{ item.value }}"
    state: exact
  loop:
    - { name: "cn", value: "RSA" }
    - { name: "nsSSLToken", value: "internal (software)" }
    - { name: "nsSSLPersonalitySSL", value: "server-cert-ansible-managed" }
    - { name: "nsSSLActivation", value: "on" }
  when: dirsrv_tls_enabled | bool
  notify: dirsrv restart

# Note: https://www.port389.org/docs/389ds/howto/howto-ssl.html says
# that other settings will not activate if nsslapd-security is off.
# This doesn't seem to be true, all options activate randomly and
# possibly immediately.
# Also: for this reason, the order is relevant.
- name: Configure TLS support
  ldap_attr:
    params: "{{ dirsrv_ldap_auth }}"
    dn: "cn=config"
    name: "nsslapd-security"
    values: "{{ 'on' if dirsrv_tls_enabled else 'off' }}"
    state: exact

# Doesn't work:
# - name: Disable TLS-only port (636)
#   ldap_attr:
#     params: "{{ ldap_auth }}"
#     dn: "cn=config"
#     name: "nsslapd-securePort"
#     values: "0"
#     state: exact

- name: Configure TLS minimum version (disable SSL)
  ldap_attr:
    params: "{{ dirsrv_ldap_auth }}"
    dn: cn=encryption,cn=config
    name: "{{ item.name }}"
    values: "{{ item.value }}"
    state: exact
  loop:
    - { name: "nsssl2", value: "off" }
    - { name: "nsssl3", value: "off" }
    - { name: "sslVersionMin", value: "TLS{{ dirsrv_tls_min_version }}" }
  notify: dirsrv restart
  when: dirsrv_tls_enabled | bool

# TODO: support it?
- name: Disable TLS client authentication
  ldap_attr:
    params: "{{ dirsrv_ldap_auth }}"
    dn: cn=encryption,cn=config
    name: "nsSSLClientAuth"
    values: "off"
    state: exact

- name: Configure anonymous binds
  ldap_attr:
    params: "{{ dirsrv_ldap_auth }}"
    dn: "cn=config"
    name: "{{ item.name }}"
    values: "{{ item.value }}"
    state: exact
  loop:
    -
      name: "nsslapd-allow-anonymous-access"
      value: "{{ 'rootdse' if dirsrv_allow_anonymous_binds == 'rootdse' else 'on' if dirsrv_allow_anonymous_binds else 'off' }}"
  # This defaults to "off" and it's better left alone
  # - { name: "nsslapd-allow-unauthenticated-binds", value: "{{ 'on' if allow_unauthenticated_binds else 'off' }" }
  when: dirsrv_tls_enabled | bool
